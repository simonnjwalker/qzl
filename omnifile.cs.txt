using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using DocumentFormat.OpenXml.Packaging;
using DocumentFormat.OpenXml.Spreadsheet;
//using System.Text;
//using System.Threading.Tasks;


namespace omni
{
    /// <summary>
    /// // omnifile
    /// This is a class for loading and saving filled .NET DataSets from local files (XLSX or CSV)
    /// 
    /// 
    /// SNJW 2017.07.23 Needs the following references:
    /// 
    /// --> DocumentFormat.OpenXml AND WindowsBase.dll
    /// C:\Program Files (x86)\Open XML SDK\V2.5\lib\DocumentFormat.OpenXml.dll
    /// C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.6.1\WindowsBase.dll
    /// </summary>
    public class omnifile : omnifilebase
    {
        public bool errorhander = true;
        public string errormessage = "";

        private void SetErrorMessage(Exception e)
        {
            this.errormessage = e.Message;
        }
        public override DataSet GetDataSetFromFile(string filepath)
        {
            if (errorhander == false)
            {
                return base.GetDataSetFromFile(filepath);
            }

            DataSet output = new DataSet();
            bool success = true;
            try
            {
                output = base.GetDataSetFromFile(filepath);
            }
            catch (Exception e)
            {
                success = false;
                this.SetErrorMessage(e);
            }
            if (success == false)
                return new DataSet();

            return output;
        }
        public override System.Data.DataTable GetDataTableFromSheet(DocumentFormat.OpenXml.Packaging.SpreadsheetDocument doc, DocumentFormat.OpenXml.Spreadsheet.Sheet sheet)
        {
            if (errorhander == false)
            {
                return base.GetDataTableFromSheet(doc, sheet);
            }

            System.Data.DataTable output = new System.Data.DataTable();
            bool success = true;
            try
            {
                output = base.GetDataTableFromSheet(doc, sheet);
            }
            catch (Exception e)
            {
                success = false;
                this.SetErrorMessage(e);
            }
            if (success == false)
                return new System.Data.DataTable();

            return output;
        }
        public override void CreateXlsxFromDataSet(System.Data.DataSet ds, string xlsxfile)
        {
            if (errorhander == false)
            {
                base.CreateXlsxFromDataSet(ds, xlsxfile);
                return;
            }

            DataSet output = new DataSet();
            try
            {
                base.CreateXlsxFromDataSet(ds, xlsxfile);
            }
            catch (Exception e)
            {
                this.SetErrorMessage(e);
            }
        }
        public override System.Data.DataSet GetDataSetFromXlsx(string xlsxfile)
        {
            if (errorhander == false)
            {
                return base.GetDataSetFromXlsx(xlsxfile);
            }

            DataSet output = new DataSet();
            bool success = true;
            try
            {
                output = base.GetDataSetFromXlsx(xlsxfile);
            }
            catch (Exception e)
            {
                success = false;
                this.SetErrorMessage(e);
            }
            if (success == false)
                return new DataSet();

            return output;
        }
        public override System.Data.DataTable GetDataTableFromXlsxSheet(string xlsxfile, string sheetname)
        {
            if (errorhander == false)
            {
                return base.GetDataTableFromXlsxSheet(xlsxfile, sheetname);
            }

            System.Data.DataTable output = new System.Data.DataTable();
            bool success = true;
            try
            {
                output = base.GetDataTableFromXlsxSheet(xlsxfile, sheetname);
            }
            catch (Exception e)
            {
                success = false;
                this.SetErrorMessage(e);
            }
            if (success == false)
                return new System.Data.DataTable();

            return output;
        }
        public override void CreateCsvFromDataSet(System.Data.DataSet ds, string filepath)
        {
            if (errorhander == false)
            {
                base.CreateCsvFromDataSet(ds, filepath);
                return;
            }
            try
            {
                base.CreateCsvFromDataSet(ds, filepath);
            }
            catch (Exception e)
            {
                this.SetErrorMessage(e);
            }
        }
        public override void CreateCsvFromDataSet(System.Data.DataSet ds, string csvfile, string tablename)
        {
            if (errorhander == false)
            {
                base.CreateCsvFromDataSet(ds, csvfile, tablename);
                return;
            }
            try
            {
                base.CreateCsvFromDataSet(ds, csvfile, tablename);
            }
            catch (Exception e)
            {
                this.SetErrorMessage(e);
            }
        }
        public override void CreateCsvDirFromDataSet(System.Data.DataSet ds, string filepath, string csvfile)
        {
            if (errorhander == false)
            {
                base.CreateCsvDirFromDataSet(ds, filepath, csvfile);
                return;
            }
            try
            {
                base.CreateCsvDirFromDataSet(ds, filepath, csvfile);
            }
            catch (Exception e)
            {
                this.SetErrorMessage(e);
            }
        }
        public override void CreateBulkSqlFromDataSet(System.Data.DataSet ds, string sqlfile, string providername, string dbname)
        {
            if (errorhander == false)
            { 
                base.CreateBulkSqlFromDataSet(ds, sqlfile, providername,  dbname);
                return;
            }
            try
            {
                base.CreateBulkSqlFromDataSet(ds, sqlfile, providername, dbname);
                return;
            }
            catch (Exception e)
            {
                this.SetErrorMessage(e);
            }
        }
        public override System.Data.DataSet GetDataSetFromCsv(string csvfile)
        {
            if (errorhander == false)
            {
                return base.GetDataSetFromCsv(csvfile);
            }

            DataSet output = new DataSet();
            bool success = true;
            try
            {
                output = base.GetDataSetFromCsv(csvfile);
            }
            catch (Exception e)
            {
                success = false;
                this.SetErrorMessage(e);
            }
            if (success == false)
                return new DataSet();

            return output;
        }
        public override System.Data.DataTable GetDataTableFromSimpleText(string doctext)
        {
            if (errorhander == false)
            {
                return base.GetDataTableFromSimpleText(doctext);
            }

            System.Data.DataTable output = new System.Data.DataTable();
            bool success = true;
            try
            {
                output = base.GetDataTableFromSimpleText(doctext);
            }
            catch (Exception e)
            {
                success = false;
                this.SetErrorMessage(e);
            }
            if (success == false)
                return new System.Data.DataTable();

            return output;
        }
        public override void CreateCsv(System.Data.DataTable dt, string filename)
        {
            if (errorhander == false)
            {
                base.CreateCsv(dt, filename);
                return;
            }
            try
            {
                base.CreateCsv(dt, filename);
                return;
            }
            catch (Exception e)
            {
                this.SetErrorMessage(e);
            }
        }

    }
    public interface omnifilemethods
    {
        System.Data.DataSet GetDataSetFromFile(string filepath);
        System.Data.DataTable GetDataTableFromSheet(DocumentFormat.OpenXml.Packaging.SpreadsheetDocument doc, DocumentFormat.OpenXml.Spreadsheet.Sheet sheet);
        void CreateXlsxFromDataSet(System.Data.DataSet ds, string xlsxfile);
        System.Data.DataSet GetDataSetFromXlsx(string xlsxfile);
        System.Data.DataTable GetDataTableFromXlsxSheet(string xlsxfile, string sheetname);
        void CreateCsvFromDataSet(System.Data.DataSet ds, string filepath);
        void CreateCsvFromDataSet(System.Data.DataSet ds, string csvfile, string tablename);
        void CreateCsvDirFromDataSet(System.Data.DataSet ds, string filepath, string csvfile);
        void CreateBulkSqlFromDataSet(System.Data.DataSet ds, string sqlfile, string providername, string dbname);
        string GetNewLineConstant(string doctext);
        string GetSeparator(string doctext);
        System.Data.DataSet GetDataSetFromCsv(string csvfile);
        System.Data.DataTable GetDataTableFromSimpleText(string doctext);
        void CreateCsv(System.Data.DataTable dt, string filename);
        
        // These are private methods in the base class: they have no IO and no need to be exposed
        //int GetXlsxRefRow(string reference);
        //int GetXlsxRefColumn(string reference);
        //string GetCellValue(DocumentFormat.OpenXml.Packaging.SpreadsheetDocument doc, DocumentFormat.OpenXml.Spreadsheet.Cell cell);
    }

    public class omnifilebase : omnifilemethods
    {

        virtual public System.Data.DataSet GetDataSetFromFile(string filepath)
        {
            System.Data.DataSet output = new System.Data.DataSet();
            string fileformat = System.IO.Path.GetExtension(filepath).ToLower().TrimStart(".".ToCharArray());
            string tablename = System.IO.Path.GetFileNameWithoutExtension(filepath).ToLower();
            if (filepath.Contains("!"))
            {
                string[] xlsxparts = filepath.Split("!".ToCharArray(), StringSplitOptions.None);
                if (xlsxparts.Length > 1)
                {
                    filepath = xlsxparts[0].Trim();
                    tablename = xlsxparts[1].Trim().ToLower();
                }
            }
            else if (fileformat == "xlsx")
            {
                tablename = "";
            }
            if (!System.IO.File.Exists(filepath))
                return output;


            if (fileformat == "txt" || fileformat == "csv")
            {

                // if a simple csv, get the 
                string doctext = "";
                try
                {
                    doctext = System.IO.File.ReadAllText(filepath);
                }
                catch
                {

                }

                if (doctext == "")
                    return output;

                System.Data.DataTable main = this.GetDataTableFromSimpleText(doctext);
                main.TableName = tablename;
                output.Tables.Add(main.Copy());

            }
            else if (fileformat == "xlsx")
            {
                // get a specific sheet ifone is specified, otherwiseget all
                if (tablename == "")
                {
                    System.Data.DataSet allsheets = this.GetDataSetFromXlsx(filepath);
                    foreach (System.Data.DataTable thistable in allsheets.Tables)
                        output.Tables.Add(thistable.Copy());
                }
                else
                {
                    System.Data.DataTable main = this.GetDataTableFromXlsxSheet(filepath, tablename);
                    main.TableName = tablename;
                    output.Tables.Add(main.Copy());
                }

            }
            return output;
        }

        virtual public System.Data.DataTable GetDataTableFromSheet(DocumentFormat.OpenXml.Packaging.SpreadsheetDocument doc, DocumentFormat.OpenXml.Spreadsheet.Sheet sheet)
        {
            System.Data.DataTable dt = new System.Data.DataTable();

            //Get the Worksheet instance.
            DocumentFormat.OpenXml.Spreadsheet.Worksheet worksheet = (doc.WorkbookPart.GetPartById(sheet.Id.Value) as DocumentFormat.OpenXml.Packaging.WorksheetPart).Worksheet;

            //Fetch all the rows present in the Worksheet.
            DocumentFormat.OpenXml.Spreadsheet.SheetData sheetdata = worksheet.GetFirstChild<DocumentFormat.OpenXml.Spreadsheet.SheetData>();
            IEnumerable<DocumentFormat.OpenXml.Spreadsheet.Row> rows = sheetdata.Descendants<DocumentFormat.OpenXml.Spreadsheet.Row>();

            dt.TableName = sheet.Name;

            int columncount = 0;
            foreach (DocumentFormat.OpenXml.Spreadsheet.Cell cell in rows.ElementAt(0))
            {
                columncount++;
                System.Data.DataColumn column = new System.Data.DataColumn();
                column.DataType = System.Type.GetType("System.String");
                column.ColumnName = this.GetCellValue(doc, cell);
                column.DefaultValue = "";
                dt.Columns.Add(column);
            }

            // 1.0.7 avoid null values by looping through the rows with rows.ElementAt(n)

            //Loop through the Worksheet rows.
            // start at the SECOND row because we have mapped the column-names already
            for (int thisrow = 1; thisrow < rows.Count(); thisrow++)
            {
                //Use the first row to add columns to DataTable.

                // SNJW the row.ChildElements collection will not include blank entries
                // That is, the cell will simply not exist!  Kind of weird but it saves memory I suppose..
                // So, instead of going column-by-column through the data-table columns,
                // we will instead go through the cells given to us and will add blanks in the in-betweens
                System.Data.DataRow newrow = dt.NewRow();

                //// set all fields to empty strings
                //for (int thisitem = 0; thisitem < columncount; thisitem++)
                //    newrow[thisitem] = "";
                DocumentFormat.OpenXml.Spreadsheet.Row row = rows.ElementAt(thisrow);
                int maxcols = row.Descendants<DocumentFormat.OpenXml.Spreadsheet.Cell>().Count();
                for (int thiscolumn = 0; thiscolumn < maxcols; thiscolumn++)
                {
                    DocumentFormat.OpenXml.Spreadsheet.Cell cell = row.Descendants<DocumentFormat.OpenXml.Spreadsheet.Cell>().ElementAt(thiscolumn);
                    // newrow[thiscolumn] = "";
                    if (cell != null)
                    {
                        if (cell.CellReference != null)
                        {
                            int refcolumn = this.GetXlsxRefColumn(cell.CellReference) - 1;
                            if (newrow.ItemArray.Length > refcolumn)
                                newrow[refcolumn] = this.GetCellValue(doc, cell);
                        }
                        else if (cell.CellValue != null)
                        {
                            // this will arise if ALL results are null for this row
                            newrow[thiscolumn] = "";
                            if (maxcols == columncount)
                            {
                                if (cell.CellValue.InnerText != null)
                                {
                                    newrow[thiscolumn] = cell.CellValue.InnerText;
                                }
                                else if (cell.CellValue.InnerXml != null)
                                {
                                    newrow[thiscolumn] = cell.CellValue.InnerXml;
                                }
                            }
                        }
                        else
                        {
                            newrow[thiscolumn] = "";
                        }
                    }

                }


                //foreach (DocumentFormat.OpenXml.Spreadsheet.Cell cell in row.Descendants<DocumentFormat.OpenXml.Spreadsheet.Cell>())
                //{
                //    // if this is non-empty
                //    // note that the XLSX reference (e.g. the "A" in cell reference "A1") is one-based
                //    // but newrow[] is a zero-based array
                //    if (cell.CellReference != null)
                //    {
                //        int thiscolumn = this.GetXlsxRefColumn(cell.CellReference) - 1;
                //        if (newrow.ItemArray.Length > thiscolumn)
                //            newrow[thiscolumn] = this.GetCellValue(doc, cell);
                //    }
                //}
                dt.Rows.Add(newrow);

            }
            return dt;
        }

        virtual public void CreateXlsxFromDataSet(System.Data.DataSet ds, string xlsxfile)
        {
            using (DocumentFormat.OpenXml.Packaging.SpreadsheetDocument workbook = DocumentFormat.OpenXml.Packaging.SpreadsheetDocument.Create(xlsxfile, DocumentFormat.OpenXml.SpreadsheetDocumentType.Workbook))
            {
                DocumentFormat.OpenXml.Packaging.WorkbookPart workbookPart = workbook.AddWorkbookPart();
                workbook.WorkbookPart.Workbook = new DocumentFormat.OpenXml.Spreadsheet.Workbook();
                workbook.WorkbookPart.Workbook.Sheets = new DocumentFormat.OpenXml.Spreadsheet.Sheets();

                foreach (System.Data.DataTable table in ds.Tables)
                {

                    var sheetPart = workbook.WorkbookPart.AddNewPart<DocumentFormat.OpenXml.Packaging.WorksheetPart>();
                    var sheetData = new DocumentFormat.OpenXml.Spreadsheet.SheetData();
                    sheetPart.Worksheet = new DocumentFormat.OpenXml.Spreadsheet.Worksheet(sheetData);

                    DocumentFormat.OpenXml.Spreadsheet.Sheets sheets = workbook.WorkbookPart.Workbook.GetFirstChild<DocumentFormat.OpenXml.Spreadsheet.Sheets>();
                    string relationshipId = workbook.WorkbookPart.GetIdOfPart(sheetPart);

                    uint sheetId = 1;
                    if (sheets.Elements<DocumentFormat.OpenXml.Spreadsheet.Sheet>().Count() > 0)
                    {
                        sheetId =
                            sheets.Elements<DocumentFormat.OpenXml.Spreadsheet.Sheet>().Select(s => s.SheetId.Value).Max() + 1;
                    }

                    DocumentFormat.OpenXml.Spreadsheet.Sheet sheet = new DocumentFormat.OpenXml.Spreadsheet.Sheet() { Id = relationshipId, SheetId = sheetId, Name = table.TableName };
                    sheets.Append(sheet);

                    DocumentFormat.OpenXml.Spreadsheet.Row headerRow = new DocumentFormat.OpenXml.Spreadsheet.Row();

                    List<String> columns = new List<string>();
                    foreach (System.Data.DataColumn column in table.Columns)
                    {
                        columns.Add(column.ColumnName);
                        DocumentFormat.OpenXml.Spreadsheet.Cell cell = new DocumentFormat.OpenXml.Spreadsheet.Cell();
                        cell.DataType = DocumentFormat.OpenXml.Spreadsheet.CellValues.String;
                        cell.CellValue = new DocumentFormat.OpenXml.Spreadsheet.CellValue(column.ColumnName);
                        headerRow.AppendChild(cell);
                    }


                    sheetData.AppendChild(headerRow);
                    foreach (System.Data.DataRow dsrow in table.Rows)
                    {
                        DocumentFormat.OpenXml.Spreadsheet.Row newRow = new DocumentFormat.OpenXml.Spreadsheet.Row();
                        foreach (String col in columns)
                        {
                            DocumentFormat.OpenXml.Spreadsheet.Cell cell = new DocumentFormat.OpenXml.Spreadsheet.Cell();
                            cell.DataType = DocumentFormat.OpenXml.Spreadsheet.CellValues.String;
                            cell.CellValue = new DocumentFormat.OpenXml.Spreadsheet.CellValue(dsrow[col].ToString()); //
                            newRow.AppendChild(cell);
                        }
                        sheetData.AppendChild(newRow);
                    }
                }
            }
        }

        virtual public System.Data.DataSet GetDataSetFromXlsx(string xlsxfile)
        {
            System.Data.DataSet output = new System.Data.DataSet();
            using (DocumentFormat.OpenXml.Packaging.SpreadsheetDocument doc = DocumentFormat.OpenXml.Packaging.SpreadsheetDocument.Open(xlsxfile, false))
            {
                //Read all sheets from Excel file.
                foreach (DocumentFormat.OpenXml.Spreadsheet.Sheet sheet in doc.WorkbookPart.Workbook.Sheets)
                {
                    output.Tables.Add(this.GetDataTableFromSheet(doc, sheet));
                }
                //= .GetFirstChild<DocumentFormat.OpenXml.Spreadsheet.Sheet>();
            }
            return output;
        }

        virtual public System.Data.DataTable GetDataTableFromXlsxSheet(string xlsxfile, string sheetname)
        {
            System.Data.DataTable output = new System.Data.DataTable();
            using (DocumentFormat.OpenXml.Packaging.SpreadsheetDocument doc = DocumentFormat.OpenXml.Packaging.SpreadsheetDocument.Open(xlsxfile, false))
            {
                //Read the first Sheet from Excel file.
                foreach (DocumentFormat.OpenXml.Spreadsheet.Sheet sheet in doc.WorkbookPart.Workbook.Sheets)
                {
                    if (sheet.Name.ToString().ToLower() == sheetname.ToLower())
                        output = this.GetDataTableFromSheet(doc, sheet);
                }
            }
            return output;
        }

        virtual public void CreateCsvFromDataSet(System.Data.DataSet ds, string filepath)
        {
            // this just loops through and put each into a separate CSV file
            foreach (System.Data.DataTable table in ds.Tables)
            {
                this.CreateCsvFromDataSet(ds, filepath.TrimEnd(new char[] { '\\' }) + '\\' + table.TableName.ToLower() + ".csv", table.TableName.ToLower());
            }
        }

        virtual public void CreateCsvFromDataSet(System.Data.DataSet ds, string csvfile, string tablename)
        {
            // 

            System.Text.StringBuilder sb = new System.Text.StringBuilder();
            System.Data.DataTable dt = ds.Tables[tablename];

            IEnumerable<string> columnNames = dt.Columns.Cast<System.Data.DataColumn>().
                                              Select(column => column.ColumnName);
            sb.AppendLine(string.Join(",", columnNames));
            for (int thisrow = 0; thisrow < dt.Rows.Count; thisrow++)
            {
                IEnumerable<string> fields = dt.Rows[thisrow].ItemArray.Select(field => field.ToString());
                if (thisrow < dt.Rows.Count - 1)
                {
                    sb.AppendLine(string.Join(",", fields));
                }
                else
                {
                    sb.Append(string.Join(",", fields));
                }
            }
            System.IO.File.WriteAllText(csvfile, sb.ToString());

        }

        virtual public void CreateCsvDirFromDataSet(System.Data.DataSet ds, string filepath, string csvfile)
        {
            // 1.0.5 create a subfolder with the tablename, then plop all CSV files into that
            string subfolder = filepath.TrimEnd(new char[] { '\\' }) + '\\' + csvfile;
            System.IO.Directory.CreateDirectory(subfolder);
            this.CreateCsvFromDataSet(ds, subfolder);
        }

        virtual public void CreateBulkSqlFromDataSet(System.Data.DataSet ds, string sqlfile, string providername, string dbname)
        {
            // we assume that these CSV files exist
            System.Text.StringBuilder sb = new System.Text.StringBuilder();
            if (providername.Contains("MySql"))
            {
                sb.AppendLine("USE " + dbname + ";");
                sb.AppendLine("SET SQL_SAFE_UPDATES = 0;");
                sb.AppendLine("SET FOREIGN_KEY_CHECKS = 0;");

                // 	USE db7180_skitalys ;
                foreach (System.Data.DataTable table in ds.Tables)
                {
                    sb.AppendLine("DELETE FROM " + table.TableName.ToLower() + " WHERE 1 = 0;");
                }
                foreach (System.Data.DataTable table in ds.Tables)
                {
                    sb.AppendLine("LOAD DATA LOCAL INFILE '" + System.IO.Path.GetDirectoryName(sqlfile).Replace(@"\", @"\\") + @"\\" + table.TableName.ToLower() + ".csv' INTO TABLE " + table.TableName.ToLower() + @" FIELDS TERMINATED BY ','  LINES TERMINATED BY '\r\n' IGNORE 1 LINES;");

                    // LOCAL INFILE 'C:\\ProgramData\\MySQL\\MySQL Server 5.7\\Uploads\\geo.txt' INTO TABLE geo  FIELDS TERMINATED BY '~|~'  LINES TERMINATED BY '*$*';
                    //  FIELDS TERMINATED BY ','  LINES TERMINATED BY '\r\n' IGNORE 1 LINES;
                }
                sb.AppendLine("SET SQL_SAFE_UPDATES = 1;");
                sb.AppendLine("SET FOREIGN_KEY_CHECKS = 1;");
                System.IO.File.WriteAllText(sqlfile, sb.ToString());
            }
        }

        virtual public string GetNewLineConstant(string doctext)
        {
            // we need to guess what type of newline  string is in use
            // if there are 2+ more \n\r than \r\n or vice versa, use that
            int nrcount = (doctext.Length - doctext.Replace("\n\r", "").Length) / 2;
            int rncount = (doctext.Length - doctext.Replace("\r\n", "").Length) / 2;
            if (nrcount > (rncount + 1))
                return "\n\r";
            if (rncount > (nrcount + 1))
                return "\r\n";

            // neither are conclusive: do the same with single-chars
            int rcount = (doctext.Length - doctext.Replace("\r", "").Length);
            int ncount = (doctext.Length - doctext.Replace("\n", "").Length);
            if ((ncount > (rcount + 1)) || rcount == 0)
                return "\n";
            return "\r";
        }

        virtual public string GetSeparator(string doctext)
        {
            // we need to guess what type of separator (tab or comma) string is in use
            int commacount = (doctext.Length - doctext.Replace(",", "").Length);
            int tabcount = (doctext.Length - doctext.Replace(Convert.ToChar(9).ToString(), "").Length);
            if (commacount > (tabcount + 1))
                return ",";
            if (tabcount > (commacount + 1))
                return Convert.ToChar(9).ToString();

            // neither are conclusive: guess it is comma
            return ",";
        }

        virtual public System.Data.DataSet GetDataSetFromCsv(string csvfile)
        {
            // 1.0.7 just return a ds with one table
            System.Data.DataSet output = new System.Data.DataSet();
            string doctext = System.IO.File.ReadAllText(csvfile);
            System.Data.DataTable dt = this.GetDataTableFromSimpleText(doctext);
            dt.TableName = System.IO.Path.GetFileNameWithoutExtension(csvfile);
            output.Tables.Add(dt);
            return output;
        }

        virtual public System.Data.DataTable GetDataTableFromSimpleText(string doctext)
        {
            // look at the type of data and text-style
            System.Data.DataTable output = new System.Data.DataTable();
            int lineId = 0;
            char separator = this.GetSeparator(doctext).ToCharArray()[0];
            string newline = System.Environment.NewLine; // this.GetNewLineConstant(doctext);
            int totalcols = 0;

            // some CSV files have quotes: remove these
            bool isquoted = false;
            char[] quotechar = new char[] { '"' };
            foreach (string thisline in doctext.Split(newline.ToCharArray(), StringSplitOptions.RemoveEmptyEntries))
            {
                // if the first line, we have to check for columns
                lineId++;
                if (lineId == 1)
                {
                    // determine the appropriate separator
                    int tabcount = 0;
                    int commacount = 0;
                    foreach (char c in thisline)
                    {
                        if (c == Convert.ToChar(9))
                        {
                            tabcount++;
                        }
                        else if (c == ',')
                        {
                            commacount++;
                        }
                    }

                    // determine type
                    if (tabcount + commacount > 0)
                    {
                        if (tabcount > commacount)
                        {
                            totalcols = tabcount + 1;
                            separator = Convert.ToChar(9);
                        }
                        if (tabcount < commacount)
                        {
                            totalcols = commacount + 1;
                            separator = ',';
                        }
                    }

                    // add the columns to the output
                    string[] colparts = thisline.Split(new char[] { separator }, StringSplitOptions.None);

                    // check whether each item is in quotes: if so, we need to un-quote them
                    int quotedcols = 0;
                    foreach (string thiscolname in colparts)
                    {
                        if (thiscolname.Trim(quotechar) != thiscolname)
                            quotedcols++;
                    }
                    if (quotedcols > 0)
                        isquoted = true;

                    foreach (string thiscolname in colparts)
                    {
                        output.Columns.Add(thiscolname.Trim(quotechar), typeof(String));
                    }

                }
                else
                {
                    // go through each line based on the columns
                    string[] colparts = thisline.Split(new char[] { separator }, StringSplitOptions.None);
                    if (colparts.Length == 1 && colparts[0] == "")
                        continue;
                    // note that there may be fewer columns here than in the headings
                    // if there are MORE, these will be ignored
                    System.Data.DataRow newrow = output.NewRow();
                    for (int thiscolnum = 0; thiscolnum < totalcols; thiscolnum++)
                    {
                        // add this to our fresh row if we can
                        if (output.Columns.Count > thiscolnum)
                        {
                            if (colparts.Length > thiscolnum)
                            {
                                if (isquoted)
                                {
                                    newrow[thiscolnum] = colparts[thiscolnum].Trim(quotechar);
                                }
                                else
                                {
                                    newrow[thiscolnum] = colparts[thiscolnum];
                                }
                            }
                            else
                            {
                                newrow[thiscolnum] = "";
                            }
                        }
                    }
                    output.Rows.Add(newrow);
                }
            }
            return output;
        }

        private int GetXlsxRefRow(string reference)
        {
            char[] array = reference.ToCharArray();
            array = Array.FindAll<char>(array, (x => (char.IsDigit(x))));
            return Int32.Parse(new string(array));
        }

        private int GetXlsxRefColumn(string reference)
        {
            char[] array = reference.ToCharArray();
            array = Array.FindAll<char>(array, (x => (char.IsLetter(x))));

            // 
            int output = (int)array[0] - 64;
            if (array.Length == 2)
            {
                output = (output * 26) + ((int)array[1] - 64);
            }
            return output;
        }

        virtual public void CreateCsv(System.Data.DataTable dt, string filename)
        {

            System.Text.StringBuilder sb = new System.Text.StringBuilder();

            IEnumerable<string> columnNames = dt.Columns.Cast<System.Data.DataColumn>().
                                              Select(column => column.ColumnName);
            sb.AppendLine(string.Join(",", columnNames));

            foreach (System.Data.DataRow row in dt.Rows)
            {
                IEnumerable<string> fields = row.ItemArray.Select(field => field.ToString());
                sb.AppendLine(string.Join(",", fields));
            }

            System.IO.File.WriteAllText(filename, sb.ToString());
        }

        private string GetCellValue(DocumentFormat.OpenXml.Packaging.SpreadsheetDocument doc, DocumentFormat.OpenXml.Spreadsheet.Cell cell)
        {
            string value = "";
            if (cell.CellValue != null)
            {
                value = cell.CellValue.InnerText;
            }

            if (cell.DataType != null)
            {
                if (cell.DataType.Value == DocumentFormat.OpenXml.Spreadsheet.CellValues.SharedString)
                    value = doc.WorkbookPart.SharedStringTablePart.SharedStringTable.ChildElements.GetItem(int.Parse(value)).InnerText;
            }
            else
            {
                // the DataType can be blank but the cell still have a value (seriously!)
                if (cell.CellValue == null)
                {
                    value = "";
                }

            }
            return value;
        }
    }
}
